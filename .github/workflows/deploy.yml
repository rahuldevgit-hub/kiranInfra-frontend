name: Deploy to EC2

on:
  push:
    branches:
      - dev
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Validate SSH Secrets
        run: |
          if [ -z "${{ secrets.AWS_HOST_IP }}" ]; then
            echo "::error::AWS_HOST_IP secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SERVER_USER }}" ]; then
            echo "::error::SERVER_USER secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
            echo "::error::SERVER_SSH_KEY secret is not set"
            exit 1
          fi

      - name: Deploy via SSH and Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          envs: GITHUB_REF
          script: |
            set -euo pipefail
            trap 'echo "‚ùå Deployment failed for branch: ${BRANCH:-unknown}"' ERR

            echo "üßº Cleaning up .gitconfig lock file if it exists..."
            sudo rm -f /root/.gitconfig.lock || true

            echo "üìä Checking disk space..."
            df -h

            echo "üßπ Cleaning up temporary files and Docker junk..."
            sudo rm -rf /tmp/*
            sudo journalctl --vacuum-time=7d
            docker system prune -af --volumes || true

            BRANCH="${GITHUB_REF#refs/heads/}"

            if [ "$BRANCH" = "dev" ]; then
              APP_DIR="/var/www/newstaging.doomshell.com"
              DOCKER_FILE="docker-compose.dev.yml"
              ENV_FILE=".env.staging"
            elif [ "$BRANCH" = "master" ]; then
              APP_DIR="/var/www/production.doomshell.com"
              DOCKER_FILE="docker-compose.prod.yml"
              ENV_FILE=".env.production"
            else
              echo "üö´ Unsupported branch: $BRANCH"
              exit 1
            fi

            echo "üîê Setting permissions for $APP_DIR"
            sudo git config --global --add safe.directory "$APP_DIR"
            sudo chown -R ${{ secrets.SERVER_USER }}:${{ secrets.SERVER_USER }} "$APP_DIR"

            echo "üì¶ Pulling latest code from $BRANCH"
            cd "$APP_DIR"
            git pull origin "$BRANCH"

            if [ ! -f "$ENV_FILE" ]; then
              echo "‚ùå $ENV_FILE not found in $APP_DIR"
              exit 1
            fi

            echo "üê≥ Restarting Docker with env: $ENV_FILE"

            # Clean up existing container (if exists) to prevent naming conflicts
            EXISTING_CONTAINER=$(docker ps -aqf "name=nextjs-app")
            if [ -n "$EXISTING_CONTAINER" ]; then
              echo "‚ö†Ô∏è Removing existing container: nextjs-app"
              docker rm -f nextjs-app || true
            fi

            # Rebuild and restart containers with fresh state
            docker compose -f $DOCKER_FILE --env-file $ENV_FILE down
            docker compose -f $DOCKER_FILE --env-file $ENV_FILE up --build --force-recreate --remove-orphans -d

            echo "‚úÖ Docker deployment completed for branch: $BRANCH"